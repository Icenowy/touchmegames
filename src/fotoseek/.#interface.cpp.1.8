
/*	Copyright (C) 2005, 2006 by Andy Grebe a.k.a. tecknophreak(tecknophreak@gmail.com)
 *
 *	This file is part of TouchMe Games.
 *
 *	TouchMe Games is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	TouchMe Games is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with TouchMe Games; if not, write to the Free Software
 *	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <fotoseek.h>
#include <sstream>
#include <iomanip>


// Fill this area with layout functions
void FotoSeek::createPlayArea() {
    GtkWidget *leftEventBox, *rightEventBox;
    
    leftEventBox = gtk_event_box_new();
    g_signal_connect(G_OBJECT(leftEventBox), "button-press-event",
                     G_CALLBACK(playAreaClicked), (gpointer)this);
    
    leftImage.loadImage("fotoseek/images/blank.png");
    leftImage.scale(imageWidth, imageHeight);
    gtk_container_add((GtkContainer *)leftEventBox, leftImage.widget());
    
    gtk_fixed_put((GtkFixed *)topFixed, leftEventBox, playXOffset, playYOffset);
    
    rightEventBox = gtk_event_box_new();
    g_signal_connect(G_OBJECT(rightEventBox), "button-press-event",
                     G_CALLBACK(playAreaClicked), (gpointer)this);
    
    rightImage.loadImage("fotoseek/images/blank.png");
    rightImage.scale(imageWidth, imageHeight);
    gtk_container_add((GtkContainer *)rightEventBox, rightImage.widget());
    
    gtk_fixed_put((GtkFixed *)topFixed, rightEventBox, playXOffset + imageWidth + 10, playYOffset);
    
    imageMask.loadImage("fotoseek/images/blank.png");
    imageMask.scale(imageWidth, imageHeight);
}

void FotoSeek::createTop() {
    GtkWidget *vbox, *hbox, *label, *lhvbox, *rhvbox;
    GtkWidget *eventBox;
    GtkWidget *image;
    GdkColor color;
    std::stringstream sstr;
    std::string str;
            
    vbox = gtk_vbox_new(FALSE, 0);
    gtk_widget_set_size_request(vbox, 150, -1);
    
    color.red = 0xF600;
    color.green = 0xFF00;
    color.blue = 0x0000;
    
    
    hbox = gtk_hbox_new(FALSE, 0);
    gtk_box_pack_start((GtkBox *)vbox, hbox, FALSE, FALSE, 0);
    lhvbox = gtk_vbox_new(FALSE, 0);
    rhvbox = gtk_vbox_new(FALSE, 0);
    gtk_box_pack_start((GtkBox *)hbox, lhvbox, FALSE, FALSE, 2);
    gtk_box_pack_start((GtkBox *)hbox, rhvbox, TRUE, TRUE, 2);
    
    
    label = gtk_label_new("High Score:");
    gtk_misc_set_alignment((GtkMisc *)label, 0.0, 0.5);
    gtk_widget_modify_fg(label, (GtkStateType)0, &color);
    gtk_box_pack_start((GtkBox *)lhvbox, label, FALSE, FALSE, 2);
    
    label = gtk_label_new("Score:");
    gtk_widget_modify_fg(label, (GtkStateType)0, &color);
    gtk_misc_set_alignment((GtkMisc *)label, 0.0, 0.5);
    gtk_box_pack_start((GtkBox *)lhvbox, label, FALSE, FALSE, 2);
    
    label = gtk_label_new("Round:");
    gtk_widget_modify_fg(label, (GtkStateType)0, &color);
    gtk_misc_set_alignment((GtkMisc *)label, 0.0, 0.5);
    gtk_box_pack_start((GtkBox *)lhvbox, label, FALSE, FALSE, 2);
    
    sstr << scores[0].score;
    str = sstr.str();
    addCommas(str);
    label = gtk_label_new(str.c_str());
    gtk_widget_modify_fg(label, (GtkStateType)0, &color);
    gtk_misc_set_alignment((GtkMisc *)label, 1.0, 0.5);
    gtk_box_pack_start((GtkBox *)rhvbox, label, TRUE, TRUE, 2);
    
    scoreLabel = gtk_label_new("0");
    gtk_widget_modify_fg(scoreLabel, (GtkStateType)0, &color);
    gtk_misc_set_alignment((GtkMisc *)scoreLabel, 1.0, 0.5);
    
    gtk_box_pack_start((GtkBox *)rhvbox, scoreLabel, TRUE, TRUE, 2);
    
    roundLabel = gtk_label_new("1");
    gtk_widget_modify_fg(roundLabel, (GtkStateType)0, &color);
    gtk_misc_set_alignment((GtkMisc *)roundLabel, 1.0, 0.5);
    
    gtk_box_pack_start((GtkBox *)rhvbox, roundLabel, TRUE, TRUE, 2);
    
    gtk_fixed_put((GtkFixed *)topFixed, vbox, 25, 50);
    
    
    // Center Image
    
    // right side
    vbox = gtk_vbox_new(FALSE, 0);
    gtk_widget_set_size_request(vbox, 150, -1);
    
//     eventBox = gtk_event_box_new();
//     gtk_event_box_set_visible_window((GtkEventBox *)eventBox, false);
//     image = loadMainImage("buttons/button_quit.png");
//     gtk_widget_add_events(eventBox, GDK_BUTTON_PRESS_MASK);
//     g_signal_connect(G_OBJECT(eventBox), "button-press-event",
//                      G_CALLBACK(userExit), (gpointer)this);
//     gtk_container_add((GtkContainer *)eventBox, image);
//     gtk_box_pack_start((GtkBox *)vbox, eventBox, FALSE, FALSE, 5);
//     gtk_widget_show_all(eventBox);
    
    label = gtk_label_new("Time Left:");
    gtk_widget_modify_fg(label, (GtkStateType)0, &color);
    gtk_box_pack_start((GtkBox *)vbox, label, FALSE, FALSE, 1);
    
    progress.init();
    progress.width(151);
    progress.height(32);
    progress.defaultImage("progress1.gif");
    progress.percent(100);
    progress.text("1:30");
    color.red = 0xFFFF;
    color.green = 0xFFFF;
    color.blue = 0xFFFF;
    progress.textColor(color);
    
    gtk_box_pack_start((GtkBox *)vbox, progress.widget(), FALSE, FALSE, 10);
    gtk_fixed_put((GtkFixed *)topFixed, vbox, gameWidth - 175, 50);
}

// remove this for the final version
void FotoSeek::test() {
    GtkWidget *leftEventBox, *rightEventBox;
    
    leftEventBox = gtk_event_box_new();
    g_signal_connect(G_OBJECT(leftEventBox), "button-press-event",
                     G_CALLBACK(playAreaClicked), (gpointer)this);
    
    leftImage.loadImage("fotoseek/images/1a.png");
    leftImage.scale(imageWidth, imageHeight);
    gtk_container_add((GtkContainer *)leftEventBox, leftImage.widget());
    
    gtk_fixed_put((GtkFixed *)topFixed, leftEventBox, playXOffset, playYOffset);
    
    rightEventBox = gtk_event_box_new();
    g_signal_connect(G_OBJECT(rightEventBox), "button-press-event",
                     G_CALLBACK(playAreaClicked), (gpointer)this);
    
    rightImage.loadImage("fotoseek/images/1b.png");
    rightImage.scale(imageWidth, imageHeight);
    gtk_container_add((GtkContainer *)rightEventBox, rightImage.widget());
    
    gtk_fixed_put((GtkFixed *)topFixed, rightEventBox, playXOffset + imageWidth + 10, playYOffset);
    
    imageMask.loadImage("fotoseek/images/1mask.png");
    imageMask.scale(imageWidth, imageHeight);
}

void FotoSeek::paintOutside(int x, int y, bool found) {
    int seekx(x), seeky(y), topy;
    int lh;
    
    // find the top were we currently are
    while (--seeky > 0 && imageMask.getColor(x, seeky) != foundColor);
    if (seeky != 0) {
        std::cout << "Seeky != 0 " << seekx << ' ' << seeky << std::endl;
        std::cout << "Color: " << std::hex << imageMask.getColor(seekx - 1, seeky) << std::dec << std::endl;
        lh = seekx;
        // go past the beginning of this
        while (--lh > 0 && imageMask.getColor(lh, seeky) == foundColor);
        if (imageMask.getColor(lh, seeky) == matchColor) {
            std::cout << "If" << std::endl;
            // now look for found color
            while (--lh > 0 && imageMask.getColor(lh, seeky) != foundColor);
            if (lh == 0) {
                std::cout << "I'm lost for now" << std::endl;
            }
            seekx = (seekx - lh) / 2 + lh;
            std::cout << "Middle of circle is: " << seekx << std::endl;
        }
        else { // we must be on the other side of the circle
            std::cout << "Else" << std::endl;
            lh = seekx;
            while (++lh < imageWidth && imageMask.getColor(lh, seeky) == foundColor);
            if (lh == imageWidth) {
                std::cout << "I'm lost for now" << std::endl;
                return;
            }
            if (imageMask.getColor(lh, seeky) == matchColor) {
            // now look for found color
                while (++lh < imageWidth && imageMask.getColor(lh, seeky) != foundColor);
                if (lh == imageWidth) {
                    std::cout << "I'm lost for now" << std::endl;
                }
                seekx = (lh - seekx) / 2 + seekx;
                std::cout << "Middle of circle is: " << seekx << std::endl;
            }
            else {
                std::cout << "I'm in the middle of the circle" << std::endl;
            }
            
        }
        
        // Now go to the top of the circle
        std::cout << "Seekx " << seekx << std::endl;
        while (--seeky > 0 && imageMask.getColor(seekx, seeky) != foundColor) {
            std::cout << "Found Color: " << std::hex << imageMask.getColor(seekx, seeky) << std::dec << std::endl;
        }
        while (--seeky > 0 && imageMask.getColor(seekx, seeky) == foundColor);
        std::cout << "Color: " << std::hex << imageMask.getColor(seekx, seeky) << std::dec << std::endl;
        ++seeky;
        std::cout << "This is the top of the circle: " << seeky << std::endl;
        paintCircle(seekx, seeky, true);
    }
    else {
        int lh(x), rh(x);
        // Find the x center of the circle for the paint
        // We're already at the top, so get a right side and a left side
        while (--lh > 0 && imageMask.getColor(lh, seeky) != foundColor);
        while (++rh < imageWidth && imageMask.getColor(rh, seeky) != foundColor);
        seekx = (rh - lh) / 2 + lh;
        
        paintCircle(seekx, seeky, true);
        
    }
    leftImage.repaint();
    rightImage.repaint();
}

void FotoSeek::paintCircle(int x, int y, bool found) {
    int yidx;
    // We're at the top of the circle, paint the top lines
    for (yidx = y; yidx < imageHeight && imageMask.getColor(x, yidx) == foundColor; ++yidx) {
        // go to the left until we run out of foundColor
        int xidx = x;
        while (xidx >= 0 && imageMask.getColor(xidx, yidx) == foundColor) {
            leftImage.setColor(xidx, yidx, foundColor);
            rightImage.setColor(xidx, yidx, foundColor);
            --xidx;
        }
        // go to the right until we run out of foundColor
        xidx = x;
        while (xidx < imageWidth && imageMask.getColor(xidx, yidx) == foundColor) {
            leftImage.setColor(xidx, yidx, foundColor);
            rightImage.setColor(xidx, yidx, foundColor);
            ++xidx;
        }
        std::cout << "End of for loop 1" << std::endl;
    }
    
    for (; yidx < imageHeight && imageMask.getColor(x, yidx) != foundColor; ++yidx) {
        // go until we find found Color
        int xidx = x;
        
        while (--xidx >= 0 && imageMask.getColor(xidx, yidx) != foundColor);
        while (xidx >= 0 && imageMask.getColor(xidx, yidx) == foundColor) {
            leftImage.setColor(xidx, yidx, foundColor);
            rightImage.setColor(xidx, yidx, foundColor);
            --xidx;
        }
        // go to the right until we run out of foundColor
        xidx = x;
        while (++xidx >= 0 && imageMask.getColor(xidx, yidx) != foundColor);
        while (xidx < imageWidth && imageMask.getColor(xidx, yidx) == foundColor) {
            leftImage.setColor(xidx, yidx, foundColor);
            rightImage.setColor(xidx, yidx, foundColor);
            ++xidx;
        }
        std::cout << "End of for loop 2" << std::endl;
    }
    
    // We're at the bottom of the circle, paint the bottom lines
    for (; yidx < imageHeight && imageMask.getColor(x, yidx) == foundColor; ++yidx) {
        // go to the left until we run out of foundColor
        int xidx = x;
        while (xidx >= 0 && imageMask.getColor(xidx, yidx) == foundColor) {
            leftImage.setColor(xidx, yidx, foundColor);
            rightImage.setColor(xidx, yidx, foundColor);
            --xidx;
        }
        // go to the right until we run out of foundColor
        xidx = x;
        while (xidx < imageWidth && imageMask.getColor(xidx, yidx) == foundColor) {
            leftImage.setColor(xidx, yidx, foundColor);
            rightImage.setColor(xidx, yidx, foundColor);
            ++xidx;
        }
        std::cout << "End of for loop 3" << std::endl;
    }
}

// Create the layout and start the round
GtkWidget *FotoSeek::init() {
    GtkWidget *image;
    // Grab the current scores
    GAME_PTR::loadScores(scores);
    
    
    currentScore = 0;
    topFixed = gtk_fixed_new();
    std::cout << "Width: " << gameWidth << " Height: " << gameHeight << std::endl;
    gtk_widget_set_size_request(topFixed, gameWidth, gameHeight);
    
    image = loadImage("bg.png");
    gtk_fixed_put((GtkFixed *)topFixed, image, 0, 0);
    
//     test();
    createTop();
    createPlayArea();
    startRound();
    
    // Change this timeout if needed.
    timer = g_timeout_add(200, timeout, this);
    
    gtk_widget_show_all(topFixed);
    
    return topFixed;
}
